generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Agregado {
  id                      Int                     @id @default(autoincrement()) @map("agregado_id")
  projeto_id              Int?
  nome                    String                  @db.VarChar(45)
  descricao               String?                 @db.Text
  regras                  String?                 @db.LongText
  created_at              DateTime                @default(now()) @db.Timestamp(0)
  updated_at              DateTime                @default(now()) @updatedAt @db.Timestamp(0)
  projeto                 Projeto?                @relation("agregadoToprojeto", fields: [projeto_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_agregado_projeto1")
  estrategia_has_agregado EstrategiaHasAgregado[]

  @@index([projeto_id], map: "fk_agregado_projeto1_idx")
  @@map("agregado")
}

model Cliente {
  id         Int       @id @default(autoincrement()) @map("cliente_id")
  nome       String    @db.VarChar(256)
  descricao  String?   @db.Text
  created_at DateTime  @default(now()) @db.Timestamp(0)
  updated_at DateTime  @default(now()) @updatedAt @db.Timestamp(0)
  projetos   Projeto[]
  usuarios   Usuario[]

  @@map("cliente")
}

model Estrategia {
  id                      Int                     @id @default(autoincrement()) @map("estrategia_id")
  funcionalidade_id       Int
  ambiente                Ambientes
  valor                   String?                 @db.Text
  variacoes               String?                 @db.LongText
  created_at              DateTime                @default(now()) @db.Timestamp(0)
  updated_at              DateTime                @default(now()) @updatedAt @db.Timestamp(0)
  funcionalidade          Funcionalidade          @relation(fields: [funcionalidade_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_estrategias_funcionalidades1")
  estrategia_has_agregado EstrategiaHasAgregado[]

  @@index([funcionalidade_id], map: "fk_estrategias_funcionalidades1_idx")
  @@map("estrategia")
}

model EstrategiaHasAgregado {
  id            Int        @id @default(autoincrement()) @map("estrategia_has_agregado_id")
  estrategia_id Int
  agregado_id   Int
  ativado       Boolean    @default(false)
  valor         String?    @db.Text
  variacoes     String?    @db.LongText
  created_at    DateTime   @default(now()) @db.Timestamp(0)
  updated_at    DateTime   @default(now()) @db.Timestamp(0)
  agregado      Agregado   @relation(fields: [agregado_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_estrategias_has_agregados_agregados1")
  estrategia    Estrategia @relation(fields: [estrategia_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_estrategias_has_agregados_estrategias")

  @@index([agregado_id], map: "fk_estrategias_has_agregados_agregados1_idx")
  @@index([estrategia_id], map: "fk_estrategias_has_agregados_estrategias_idx")
  @@map("estrategia_has_agregado")
}

model Funcionalidade {
  id              Int          @id @default(autoincrement()) @map("funcionalidade_id")
  projeto_id      Int
  nome            String       @db.VarChar(50)
  descricao       String?      @db.Text
  ativada_prod    Boolean      @default(false)
  ativada_homolog Boolean      @default(false)
  ativada_dev     Boolean      @default(false)
  created_at      DateTime     @default(now()) @db.Timestamp(0)
  updated_at      DateTime     @default(now()) @updatedAt @db.Timestamp(0)
  projeto         Projeto      @relation("funcionalidadeToprojeto", fields: [projeto_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_funcionalidade_projeto1")
  estrategias     Estrategia[]

  @@index([projeto_id], map: "fk_funcionalidade_projeto1_idx")
  @@map("funcionalidade")
}

model Projeto {
  id              Int              @id @default(autoincrement()) @map("projeto_id")
  cliente_id      Int
  nome            String           @db.VarChar(100)
  descricao       String?          @db.Text
  created_at      DateTime         @default(now()) @db.Timestamp(0)
  updated_at      DateTime         @default(now()) @updatedAt @db.Timestamp(0)
  cliente         Cliente          @relation(fields: [cliente_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_projetos_clientes1")
  agregados       Agregado[]       @relation("agregadoToprojeto")
  chave           Chave[]          @relation("chaveToprojeto")
  funcionalidades Funcionalidade[] @relation("funcionalidadeToprojeto")

  @@index([cliente_id], map: "fk_projetos_clientes1_idx")
  @@map("projeto")
}

model Usuario {
  id         Int         @id @default(autoincrement()) @map("usuario_id")
  cliente_id Int
  nome       String      @db.VarChar(256)
  email      String      @db.VarChar(128)
  tipo       UsuarioTipo
  senha      String?     @db.VarChar(256)
  created_at DateTime    @default(now()) @db.Timestamp(0)
  updated_at DateTime    @default(now()) @updatedAt @db.Timestamp(0)
  cliente    Cliente     @relation(fields: [cliente_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usuario_cliente")

  @@index([cliente_id], map: "fk_usuarios_clientes1_idx")
  @@map("usuario")
}

model Chave {
  id   String         @id @db.VarChar(512) @map("chave_id")
  projeto_id Int
  ambiente   Ambientes
  created_at DateTime       @default(now()) @db.Timestamp(0)
  updated_at DateTime       @default(now()) @updatedAt @db.Timestamp(0)
  projeto    Projeto        @relation("chaveToprojeto", fields: [projeto_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_chave_projeto1")

  @@index([projeto_id], map: "fk_chave_projeto1_idx")
  @@map("chave")
}

enum UsuarioTipo {
  Administrador
  Usuario
}

enum Ambientes {
  prod
  homolog
  dev
}
